{"version":3,"sources":["utils/helpers.js","components/documentation/DocumentComponent.js","components/generic/Loading.js","components/buttons/ActionButton.js","components/Inputs/Options.js","audio/SoundEffect.js","context/AppProvider.js","components/generic/AppUIStateToggle.js","components/generic/DigitalWatch.js","components/generic/TimerDisplay.js","components/generic/PauseDisplay.js","components/generic/TimerGoal.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/generic/DigitalRounds.js","components/timers/XY.js","components/timers/Tabata.js","context/settings.js","components/buttons/AnchorButton.js","components/generic/DisplayBreaks.js","components/generic/DisplayRounds.js","components/Inputs/Input.js","components/generic/TimerToolBar.js","views/DocumentationView.js","views/TimersView.js","App.js","index.js"],"names":["hex","_timeToSeconds","hours","minutes","seconds","parseInt","_timeToDisplay","input","dateTime","Date","setSeconds","timeVal","toISOString","substr","ex","_getKey","len","output","i","charAt","Math","floor","random","length","Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","this","props","title","component","propDocs","map","doc","prop","description","type","defaultValue","React","Component","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","defaultProps","getButtonTitle","defaultButtonAction","console","log","ActionButton","theme","onClick","name","className","Options","onChange","e","target","value","current","options","playAudio","clip","volume","clips","APP_AUDIO","CLIPS","audio","Audio","default","VOLUME","play","AppContext","createContext","status","setTimerStatus","val","setHours","setMinutes","breakHours","setBreakHours","breakMinutes","setBreakMinutes","breakSeconds","setBreakSeconds","workoutStatus","setWorkoutStatus","formattedTime","setformattedTime","currentTime","setCurrentTime","setOnReachedGoal","onStartTiming","onStopTimer","workflowState","setWorkflowState","currentTimer","setCurrentTimer","shouldRender","rounds","setRounds","onSkipRound","interfaceState","setInterfaceState","formattedBreakTime","AppProvider","children","useState","setformattedBreakTime","APP_FLOW_KEYS","WORKOUT","APP_RENDER_KEYS","COUNTDOWN","setTimer","APP_UI_KEYS","FLOW","useEffect","fTime","fdTime","setTimerToDisplay","onReachedGoal","APP_AUDIO_CLIP_KEYS","ON_REACHED_GOAL","onCompleteRound","ON_COMPLETE_ROUND","timeout","setTimeout","newTime","XY","REST","STOPWATCH","TABATA","clearTimeout","Provider","tis","btis","timeInSeconds","ON_TIMING","alert","ON_STOP_TIMER","state","AppUIStateToggle","useContext","SETTINGS","iconRef","APP_ICON_KEYS","BACK","DigitalWatch","displayTime","onCloseTimer","onSetSeconds","onSetMinutes","onSetHours","toggleOnSettings","Array","keys","TimerDisplay","onPauseTimer","renderState","PauseDisplay","onResumeTimer","TimerGoal","alt","src","StopWatch","Countdown","DigitalRounds","displayBreakTime","onSetBreakHours","onSetBreakMinutes","onSetBreakSeconds","Tabata","server","MENU","APP_ICONS","START_TIMER","ON_START_TIMER","ON_CLICK","ON_PAUSE","DEFAULT","TIMER_REF","RENDER_STATE","APP_TIMERS","subTitle","C","Stopwatch","S","recId","timer","AnchorButton","IconRef","DisplayBreaks","onConvertToTime","DisplayRounds","onSetRounds","Input","placeholder","TimerToolBar","accessToggle","Note","href","currentValues","Timers","Timer","TimerTitle","TimerSubtitle","App","timers","to","exact","path","TimersView","DocumentationView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edd29f7a.chunk.js","sourcesContent":["// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// import { Helpers } from \"react-scroll\";\n\n// _________________________________________________________________ //\n// These changes are to comply with the course requirements.\n// - Change all ES5 code to ES6.\n\nconst hex = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n// Create a module i will be using as a handle. Sys seem's short and sexy.\n\n// Convert time to seconds. Single liner. Hmm. I'm learning.\nexport const _timeToSeconds = ({hours, minutes, seconds}) => parseInt((hours * 60) * 60) + parseInt(minutes * 60) + parseInt(seconds);\n\n// Convert to time string. If we reveive an input, which is already in seconds, there should be no need to do additional calculations.\nexport const _timeToDisplay = ({input, hours, minutes, seconds}) =>  {\n  let dateTime = new Date(null);\n  dateTime.setSeconds(input || _timeToSeconds({hours, minutes, seconds})); // specify value of SECONDS\n  let timeVal = \"\";\n  try{\n    timeVal = dateTime.toISOString().substr(11, 8);\n  } catch (ex) {\n    timeVal = \"00:00:00\";\n  }\n  return timeVal;\n}\n\n// Please advice if there is a better way to deal with unique keys in react.\nexport const _getKey = (len=15) => {\n  let output = '';\n  for (let i = 0; i < len; ++i) {\n    output += hex.charAt(Math.floor(Math.random() * hex.length));\n  }\n  return output;\n}\n\n// Helper Methods\n\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { _getKey } from \"../../utils/helpers\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #dddddd;\n  margin: 20px 0px;\n  border-radius: 0px;\n  box-shadow: 0px 5px 9px 0px #0000003d;\n  border-bottom: 2px solid #0085c5;\n`;\n\nconst Container = styled.div`\n  justify-content: center;\n  width: auto;\n  height: 100%;\n  overflow: hidden;\n  background: white;\n  padding: 50px;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\nalign-items: center;\n    margin: auto;\n    width: auto;\n    display: table;\n`;\n\nconst Documentation = styled.table``;\n\nclass DocumentComponent extends React.Component {\n  render() {\n    return (\n      <Wrapper key={_getKey()}>\n        <Title key={_getKey()}>{this.props.title}</Title>\n        <Container key={_getKey()}>\n          <RenderComponent key={_getKey()}>{this.props.component}</RenderComponent>\n          <Documentation key={_getKey()}>\n            <tbody>\n            <tr key={_getKey()}>\n              <th key={_getKey()}>Prop</th>\n              <th key={_getKey()}>Description</th>\n              <th key={_getKey()}>Type</th>\n              <th key={_getKey()}>Default value</th>\n            </tr>\n            {this.props.propDocs.map((doc) => {\n              return (\n                <tr key={_getKey()}>\n                  <td key={_getKey()}>{doc.prop}</td>\n                  <td key={_getKey()}>{doc.description}</td>\n                  <td key={_getKey()}>{doc.type}</td>\n                  <td key={_getKey()}>\n                    <code key={_getKey()}>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              );\n            })}\n            </tbody>\n          </Documentation>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nclass Loading extends React.Component {\n  render() {\n    const size = sizeMapping[this.props.size];\n    const { color } = this.props;\n\n    return (\n      <Container>\n        <DotGroup>\n          <Dot size={size} color={color} />\n          <Dot size={size} color={color} />\n        </DotGroup>\n        <DotGroup>\n          <Dot size={size} color={color} />\n          <Dot size={size} color={color} />\n        </DotGroup>\n      </Container>\n    );\n  }\n}\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","import React from \"react\";\n\nconst getButtonTitle = (input) => {\n    if (input) return input;\n    return 'Untitled';\n}\n\nconst getClassName = (input) => {\n  if (input) return input;\n  return 'Default-Action-Button';\n}\n\nconst defaultButtonAction = (input) => {\n  return ()=>console.log('Default button action.');\n}\n\nconst ActionButton = ({theme, onClick, name}) => {\n  return <button className={getClassName(theme)} onClick={onClick || defaultButtonAction}>{getButtonTitle(name)}</button>;\n}\n\nexport default ActionButton;\n","import { Component } from \"react\";\nimport \"./Input.css\";\nimport { _getKey } from \"../../utils/helpers\";\n\n\n// TODO: Convert to functional component.\nclass Options extends Component {\n  render() {\n    return (\n      <div className=\"Option-Wrapper\">\n        <label>{this.props.name}</label>\n        <select\n          onChange={(e) => {\n            this.props.onChange(e.target.value);\n          }}\n          className={this.props.className || \"Default-select\"}\n          value={this.props.current || 0}\n        >\n          {(this.props.options || [\"Nothing found\"]).map((e, i) => {\n            return (\n              <option key={_getKey()} value={e}>\n                {e}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Options;\n","import React from \"react\";\nimport { APP_AUDIO } from \"../context/settings\";\n\n// I am no longer using Hawler due to problems while getting \n// audio url from createObjectURL. Not to mention the inconsistancy.\n// Will leave this here for reference to changes made.\nconst SoundEffect = () => {\n  // deprecated.\n  return <></>;\n};\n\n// New function for playing audio. \n// Clips are predefined, and can only be changed from the [clips] Associative array.\nexport const playAudio = ({clip, volume}) => {\n  const clips = APP_AUDIO.CLIPS;\n  const audio = new Audio(clips[clip] || clips.default);\n  audio.volume = volume || APP_AUDIO.VOLUME;\n  audio.play();\n}\n\n\n// Still exporting sound effects, because generally, after changes we don't remove code. \n// Old habits die hard. :(\nexport default SoundEffect;\n","import React, { useState, useEffect } from \"react\";\nimport { _timeToSeconds, _timeToDisplay } from \"../utils/helpers\";\nimport { playAudio } from \"../audio/SoundEffect\";\nimport {\n  APP_RENDER_KEYS,\n  APP_FLOW_KEYS,\n  APP_UI_KEYS,\n  setTimerToDisplay,\n  APP_AUDIO_CLIP_KEYS,\n} from \"./settings\";\n\n// Presets for the AppContext.\n// This list will grow exponentially as the application grows.\n\n// Still thinking of ways to manage this better.\n\nexport const AppContext = React.createContext({\n  status: \"inactive\",\n  setTimerStatus: (val) => {},\n  hours: 0,\n  setHours: (val) => {},\n  minutes: 0,\n  setMinutes: (val) => {},\n  seconds: 0,\n  setSeconds: (val) => {},\n  breakHours: 0,\n  setBreakHours: (val) => {},\n  breakMinutes: 0,\n  setBreakMinutes: (val) => {},\n  breakSeconds: 0,\n  setBreakSeconds: (val) => {},\n  workoutStatus: \"\",\n  setWorkoutStatus: (val) => {},\n  formattedTime: \"\",\n  setformattedTime: (val) => {},\n  currentTime: \"\",\n  setCurrentTime: (val) => {},\n  setOnReachedGoal: () => {},\n  onStartTiming: (val) => {},\n  onStopTimer: (val) => {},\n  workflowState: \"Workout\",\n  setWorkflowState: (val) => {},\n  currentTimer: null,\n  setCurrentTimer: (val) => {},\n  shouldRender: (val) => {},\n  rounds: 0,\n  setRounds: (val) => {},\n  onSkipRound: (val) => {},\n  interfaceState: null,\n  setInterfaceState: () => {},\n  formattedBreakTime: \"\",\n});\n\n// I decided to move all the effects up one level to the global context.\n// That is, all effects will be handled with context. DRY. [ :) ]\nconst AppProvider = ({ children }) => {\n  const [status, setTimerStatus] = useState(\"active\");\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(2);\n  const [seconds, setSeconds] = useState(30);\n  const [rounds, setRounds] = useState(5);\n  const [breakHours, setBreakHours] = useState(0);\n  const [breakMinutes, setBreakMinutes] = useState(1);\n  const [breakSeconds, setBreakSeconds] = useState(30);\n  const [workoutStatus, setWorkoutStatus] = useState(\"Workout\");\n  const [formattedTime, setformattedTime] = useState(\"\");\n  const [formattedBreakTime, setformattedBreakTime] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(\"\");\n  const [workflowState, setWorkflowState] = useState(APP_FLOW_KEYS.WORKOUT);\n  const [currentTimer, setTimer] = useState(APP_RENDER_KEYS.COUNTDOWN);\n  const [interfaceState, setInterfaceState] = useState(APP_UI_KEYS.FLOW);\n\n  const setCurrentTimer = (e) => {\n    setTimer(e);\n    setTimerStatus(\"active\");\n  };\n\n  const shouldRender = ({ state }) => currentTimer === state;\n\n  useEffect(() => {\n    const fTime = _timeToDisplay({\n      hours,\n      minutes,\n      seconds,\n    });\n    const fdTime = _timeToDisplay({\n      hours: breakHours,\n      minutes: breakMinutes,\n      seconds: breakSeconds,\n    });\n    setformattedTime(fTime);\n    setformattedBreakTime(fdTime);\n  }, [hours, minutes, seconds, breakHours, breakMinutes, breakSeconds]);\n\n  // Update constants for timer to render.\n  // Perhaps not the best approuch, since i have values for currentTimer to display\n  // within the context, and it's shared accross the application.\n\n  // Hmm, Will think about this approuch.\n\n  /* CHANGE IMPLEMENTED */\n  /*---------------------------------------------------------------------------------------------*/\n  // TO-WIT: Changed access to currentTimer. This is now handle with context.\n  // That is, all components access this value from AppContext Provider, instead of const globals.\n  // Notice, the value is still kept in a global const. However, a copy of it is accessable with context.\n  useEffect(() => {\n    setTimerToDisplay(currentTimer);\n  }, [currentTimer]);\n\n  // Handle Stop Timer button onclick here.\n  const onStopTimer = () => {\n    const fTime = _timeToDisplay({\n      hours,\n      minutes,\n      seconds,\n    });\n    const fdTime = _timeToDisplay({\n      hours: breakHours,\n      minutes: breakMinutes,\n      seconds: breakSeconds,\n    });\n    setTimerStatus(\"inactive\");\n    setformattedTime(fTime);\n    setformattedBreakTime(fdTime);\n    setCurrentTime(0);\n    playAudio({ clip: APP_AUDIO_CLIP_KEYS.ON_STOP_TIMER });\n  };\n\n  // Handle start timing button onclick here.\n  const onStartTiming = () => {\n    // Time in seconds for main timer\n    const tis = _timeToSeconds({ hours, minutes, seconds });\n    // Time in seconds for break timer.\n    const btis = _timeToSeconds({\n      hours: breakHours,\n      minutes: breakMinutes,\n      seconds: breakSeconds,\n    });\n\n    // Validation of inputs for all components.\n    if (tis === 0) {\n      alert(\"Please make sure you set the time limits before continuing.\");\n      return;\n    } else if (currentTimer === APP_RENDER_KEYS.XY && btis === 0) {\n      alert(\"Please make sure you specify break duration before continuing.\");\n      return;\n    } else if (\n      (currentTimer === APP_RENDER_KEYS.XY ||\n        currentTimer === APP_RENDER_KEYS.TABATA) &&\n      rounds === 0\n    ) {\n      alert(\"Please make sure you set timer rounds limits before continuing.\");\n      return;\n    }\n\n    let timeInSeconds = 0;\n    if (currentTimer === APP_RENDER_KEYS.COUNTDOWN) {\n      timeInSeconds = tis;\n    }\n    setCurrentTime(timeInSeconds);\n    setformattedTime(_timeToDisplay({ input: timeInSeconds }));\n    setformattedBreakTime(_timeToDisplay({ input: btis }));\n    setTimerStatus(\"timing\");\n    playAudio({ clip: APP_AUDIO_CLIP_KEYS.ON_TIMING });\n  };\n\n  // Any action on reach goal comes here, that is, once the timer reaches\n  // it's target value, negative or positive.\n  const onReachedGoal = () => {\n    setTimerStatus(\"complete\");\n    playAudio({ clip: APP_AUDIO_CLIP_KEYS.ON_REACHED_GOAL });\n  };\n\n  // Any action on round complete comes here before next render.\n  const onCompleteRound = () => {\n    playAudio({ clip: APP_AUDIO_CLIP_KEYS.ON_COMPLETE_ROUND });\n  };\n\n  const onSkipRound = () => {\n    if (\n      (currentTimer !== APP_RENDER_KEYS.TABATA &&\n        currentTimer !== APP_RENDER_KEYS.XY) ||\n      rounds <= 0)\n      return;\n\n    const fdTime = _timeToDisplay({\n      hours: breakHours,\n      minutes: breakMinutes,\n      seconds: breakSeconds,\n    });\n    setRounds(rounds - 1);\n    setWorkflowState(APP_FLOW_KEYS.WORKOUT);\n    onCompleteRound();\n    setformattedBreakTime(fdTime);\n    setformattedTime(formattedTime);\n    setCurrentTime(0);\n  };\n\n  // This hook handles the tick function, and cleanup of interval before next render.\n  useEffect(() => {\n    // Check if we are allowed to start the tick function.\n    // Prevent subscription from executing every time.\n    if (status !== \"timing\") return;\n\n    const timeout = setTimeout(() => {\n      // Should we increment or decrement the count?\n      let newTime =\n        currentTimer === APP_RENDER_KEYS.COUNTDOWN\n          ? currentTime - 1\n          : currentTime + 1;\n\n      // Test and return the right timer based on the APP_RENDER_KEYS and APP_FLOW_KEYS.\n      // Notice, target time changes based on currentTimer and workflowState.\n      // Also, it's relatively clean to manage everything here.\n      const target =\n        currentTimer === APP_RENDER_KEYS.XY\n          ? workflowState === APP_FLOW_KEYS.REST\n            ? _timeToSeconds({\n                hours: breakHours,\n                minutes: breakMinutes,\n                seconds: breakSeconds,\n              })\n            : _timeToSeconds({ hours, minutes, seconds })\n          : _timeToSeconds({ hours, minutes, seconds });\n\n      // Test if the timer has reached it's goal.\n      if (newTime < 0 && currentTimer === APP_RENDER_KEYS.COUNTDOWN) {\n        onReachedGoal();\n        return;\n      } else if (\n        newTime >= target &&\n        currentTimer === APP_RENDER_KEYS.STOPWATCH\n      ) {\n        onReachedGoal();\n        return;\n      } else if (newTime >= target && currentTimer === APP_RENDER_KEYS.TABATA) {\n        if (workflowState === APP_FLOW_KEYS.WORKOUT) {\n          setWorkflowState(APP_FLOW_KEYS.REST);\n          newTime = 0;\n        } else if (rounds > 0) {\n          setRounds(rounds - 1);\n          newTime = 0;\n          onCompleteRound();\n        } else {\n          onReachedGoal();\n          return;\n        }\n      } else if (newTime >= target && currentTimer === APP_RENDER_KEYS.XY) {\n        if (workflowState === APP_FLOW_KEYS.WORKOUT) {\n          setWorkflowState(APP_FLOW_KEYS.REST);\n          newTime = 0;\n        } else if (rounds > 0) {\n          setRounds(rounds - 1);\n          newTime = 0;\n          setWorkflowState(APP_FLOW_KEYS.WORKOUT);\n          onCompleteRound();\n        } else {\n          setWorkflowState(APP_FLOW_KEYS.WORKOUT);\n          onReachedGoal();\n          return;\n        }\n      }\n\n      // Set the display time, which is to be use for display in the digital watch display.\n      const fTime = _timeToDisplay({ input: newTime });\n      const fdTime = _timeToDisplay({\n        hours: breakHours,\n        minutes: breakMinutes,\n        seconds: breakSeconds,\n      });\n      // Set state values for formated time, and new current time.\n      setformattedTime(fTime);\n      setformattedBreakTime(fdTime);\n      setCurrentTime(newTime);\n    }, 1000);\n\n    return () => {\n      // Lets clean up the timeout object to avoid memory leaking.\n      clearTimeout(timeout);\n    };\n    // Monitor both the current time and status to alsp\n    // allow trigger once the status changes back to timing.\n\n    // At this point, I'm only adding additional dependencies to avoid useEffect dependency hell.\n    // Will need to review this part of the code.\n    // I do controll executions of this subscription though, on top level. So, this should only run when\n    // the workflow state is timing.\n  }, [\n    currentTime,\n    status,\n    currentTimer,\n    hours,\n    minutes,\n    seconds,\n    workflowState,\n    rounds,\n    breakHours,\n    breakMinutes,\n    breakSeconds,\n  ]);\n\n  // Pass getters and setters down to child components.\n  return (\n    <AppContext.Provider\n      value={{\n        status,\n        setTimerStatus,\n        hours,\n        setHours,\n        minutes,\n        setMinutes,\n        seconds,\n        setSeconds,\n        breakHours,\n        setBreakHours,\n        breakMinutes,\n        setBreakMinutes,\n        breakSeconds,\n        setBreakSeconds,\n        workoutStatus,\n        setWorkoutStatus,\n        formattedTime,\n        setformattedTime,\n        currentTime,\n        setCurrentTime,\n        onStartTiming,\n        onStopTimer,\n        workflowState,\n        setWorkflowState,\n        currentTimer,\n        setCurrentTimer,\n        shouldRender,\n        rounds,\n        setRounds,\n        onSkipRound,\n        interfaceState,\n        setInterfaceState,\n        formattedBreakTime,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppProvider;\n","import React, { useContext } from \"react\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport { APP_UI_KEYS, APP_ICON_KEYS } from \"../../context/settings\";\nimport AnchorButton from \"../buttons/AnchorButton\";\n\nconst AppUIStateToggle = () => {\n  const { interfaceState, setInterfaceState } = useContext(AppContext);\n\n  const renderSettings = () => {\n    return (\n      <div className=\"Default-Container\">\n        <AnchorButton\n          name=\"\"\n          iconRef={APP_ICON_KEYS.BACK}\n          className=\"Special Float-Right\"\n          onClick={() => setInterfaceState(APP_UI_KEYS.FLOW)}\n        />\n      </div>\n    );\n  };\n\n  const renderFlow = () => {\n    return (\n      <div className=\"Default-Container\">\n        <AnchorButton\n          name=\"\"\n          iconRef={APP_ICON_KEYS.SETTINGS}\n          className=\"Float-Right\"\n          onClick={() => setInterfaceState(APP_UI_KEYS.SETTINGS)}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {interfaceState === APP_UI_KEYS.SETTINGS\n        ? renderSettings()\n        : renderFlow()}\n    </>\n  );\n};\n\nexport default AppUIStateToggle;","import React, { useContext } from \"react\";\nimport Options from \"../Inputs/Options\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport AppUIStateToggle from \"./AppUIStateToggle\";\nimport { APP_UI_KEYS } from \"../../context/settings\";\n\nfunction DigitalWatch() {\n  // Simplify the code in parent component by getting getters and setters straigt from context\n  // At this level, i think it is still manage-able. However, you'll be the judge of it :).\n  const {\n    formattedTime: displayTime,\n    onStartTiming,\n    onStopTimer: onCloseTimer,\n    setSeconds: onSetSeconds,\n    setMinutes: onSetMinutes,\n    setHours: onSetHours,\n  } = useContext(AppContext);\n  const { hours, minutes, seconds, interfaceState } = useContext(AppContext);\n  const toggleOnSettings = (interfaceState !== APP_UI_KEYS.FLOW);\n\n  return (\n    <div className=\"Content-Wrapper\">\n      <AppUIStateToggle />\n      {toggleOnSettings && <div className=\"Stop-Watch\">\n        <Options\n          options={[...Array(24).keys()]}\n          onChange={onSetHours}\n          current={hours || 0}\n          name=\"Hours\"\n        />\n        <Options\n          options={[...Array(60).keys()]}\n          onChange={onSetMinutes}\n          current={minutes || 0}\n          name=\"Minutes\"\n        />\n        <Options\n          options={[...Array(60).keys()]}\n          onChange={onSetSeconds}\n          current={seconds || 0}\n          name=\"Seconds\"\n        />\n      </div>}\n      <div className=\"Preview\">{displayTime || \"00:00:00:00\"}</div>\n      <div className=\"Action-Wrapper\">\n        <AnchorButton\n          name=\"Start timing\"\n          className=\"Special\"\n          onClick={onStartTiming}\n        />\n        <AnchorButton name=\"Close Timer\" onClick={onCloseTimer} />\n      </div>\n    </div>\n  );\n}\n\nexport default DigitalWatch;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport { APP_RENDER_KEYS } from \"../../context/settings\";\n\nfunction TimerDisplay() {\n  const {\n    currentTimer,\n    workflowState,\n    rounds,\n    formattedTime: displayTime,\n    setTimerStatus: onPauseTimer,\n    onSkipRound,\n  } = useContext(AppContext);\n\n  const renderState = () => {\n    switch (currentTimer) {\n      case APP_RENDER_KEYS.XY:\n        return (\n          <div className=\"Content-Wrapper\">\n            <div className=\"Timer-Tittle\">{workflowState}</div>\n            <div className=\"Stop-Watch\">{displayTime}</div>\n            <pre className=\"Rounds-Preview\">Rounds: {rounds}</pre>\n            <AnchorButton name=\"Pause\" onClick={() => onPauseTimer(\"paused\")} />\n            <AnchorButton name=\"Next Round\" onClick={() => onSkipRound()} />\n          </div>\n        );\n      case APP_RENDER_KEYS.TABATA:\n        return (\n          <div className=\"Content-Wrapper\">\n            <div className=\"Stop-Watch\">{displayTime}</div>\n            <pre className=\"Rounds-Preview\">Rounds: {rounds}</pre>\n            <AnchorButton name=\"Pause\" onClick={() => onPauseTimer(\"paused\")} />\n            <AnchorButton name=\"Next Round\" onClick={() => onSkipRound()} />\n          </div>\n        );\n      default:\n        return (\n          <div className=\"Content-Wrapper\">\n            <div className=\"Stop-Watch\">{displayTime}</div>\n            <AnchorButton name=\"Pause\" onClick={() => onPauseTimer(\"paused\")} />\n          </div>\n        );\n    }\n  };\n  return <>{renderState()}</>;\n}\n\nexport default TimerDisplay;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\n\nfunction PauseDisplay () {\n  // Simplify the code in parent component by getting getters and setters straigt from context\n  // At this level, i think it is still manage-able. However, you'll be the judge of it :).\n  const { formattedTime:displayTime, setTimerStatus:onResumeTimer, onStopTimer:onCloseTimer } = useContext(AppContext);\n  return (\n    <div className=\"Content-Wrapper\">\n      <div className=\"Stop-Watch\">{displayTime}</div>\n      <AnchorButton name=\"Resume Timer\" onClick={() => onResumeTimer(\"timing\")} />\n      <AnchorButton name=\"Reset Timer\" onClick={onCloseTimer} />\n    </div>\n  );\n}\n\nexport default PauseDisplay;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\n\nfunction TimerGoal () {\n  const { setTimerStatus } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"Timer-Goal-Wrapper\">\n        <img alt=\"timer-goal\" src=\"https://raw.githubusercontent.com/prof-tejera/assignment-2-ROK862/main/src/images/goal-reached-animation.gif\" />\n      </div>\n      <AnchorButton name=\"Reset Timer\" onClick={()=>setTimerStatus(\"active\")} />\n    </>\n  );\n}\n\nexport default TimerGoal","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalWatch from \"../generic/DigitalWatch\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst StopWatch = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n\n  // I simplified the render state function to reduce the amound of data that is passed back\n  // and forth between children and parent component.\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalWatch />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default StopWatch;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalWatch from \"../generic/DigitalWatch\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst Countdown = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n\n  // I simplified the render state function to reduce the amound of data that is passed back\n  // and forth between children and parent components.\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalWatch />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React, { useContext } from \"react\";\nimport Options from \"../Inputs/Options\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport { APP_RENDER_KEYS, APP_UI_KEYS } from \"../../context/settings\";\nimport AppUIStateToggle from \"./AppUIStateToggle\";\n\nfunction DigitalRounds() {\n  // Simplify the code in parent component by getting getters and setters straigt from context\n  // At this level, i think it is still manage-able. However, you'll be the judge of it :).\n  const {\n    currentTimer,\n    setRounds,\n    formattedTime: displayTime,\n    formattedBreakTime: displayBreakTime,\n    onStartTiming,\n    onStopTimer: onCloseTimer,\n    setSeconds: onSetSeconds,\n    setMinutes: onSetMinutes,\n    setHours: onSetHours,\n  } = useContext(AppContext);\n  const { rounds, hours, minutes, seconds } = useContext(AppContext);\n  const {\n    setBreakHours: onSetBreakHours,\n    setBreakMinutes: onSetBreakMinutes,\n    setBreakSeconds: onSetBreakSeconds,\n  } = useContext(AppContext);\n  const { breakHours, breakMinutes, breakSeconds, interfaceState } =\n    useContext(AppContext);\n  const toggleOnSettings = interfaceState !== APP_UI_KEYS.FLOW;\n\n  const renderState = () => {\n    switch (currentTimer) {\n      case APP_RENDER_KEYS.XY:\n        return (\n          <div className=\"Content-Wrapper\">\n            <AppUIStateToggle />\n            <pre className=\"Title-Wrapper\">Workout Duration</pre>\n            {!toggleOnSettings ? (\n              <div className=\"Preview Small\">{displayTime}</div>\n            ) : (\n              <div className=\"Stop-Watch\">\n                <Options\n                  options={[...Array(24).keys()]}\n                  onChange={onSetHours}\n                  current={hours || 0}\n                  name=\"Hours\"\n                />\n                <Options\n                  options={[...Array(60).keys()]}\n                  onChange={onSetMinutes}\n                  current={minutes || 0}\n                  name=\"Minutes\"\n                />\n                <Options\n                  options={[...Array(60).keys()]}\n                  onChange={onSetSeconds}\n                  current={seconds || 0}\n                  name=\"Seconds\"\n                />\n              </div>\n            )}\n            <pre className=\"Title-Wrapper\">Break Duration</pre>\n            {!toggleOnSettings ? (\n              <div className=\"Preview Small\">{displayBreakTime}</div>\n            ) : (\n              <div className=\"Stop-Watch\">\n                <Options\n                  options={[...Array(24).keys()]}\n                  onChange={onSetBreakHours}\n                  current={breakHours || 0}\n                  name=\"Hours\"\n                />\n                <Options\n                  options={[...Array(60).keys()]}\n                  onChange={onSetBreakMinutes}\n                  current={breakMinutes || 0}\n                  name=\"Minutes\"\n                />\n                <Options\n                  options={[...Array(60).keys()]}\n                  onChange={onSetBreakSeconds}\n                  current={breakSeconds || 0}\n                  name=\"Seconds\"\n                />\n              </div>\n            )}\n\n            <div className=\"Preview\">\n              {!toggleOnSettings ? (\n                <>\n                  <pre className=\"Title-Wrapper\">Rounds</pre>\n                  <div className=\"Preview Small\">{rounds}</div>\n                </>\n              ) : (\n                <>\n                  <Options\n                    options={[...Array(30).keys()]}\n                    onChange={setRounds}\n                    current={rounds || 0}\n                    name=\"Rounds\"\n                  />\n                </>\n              )}\n            </div>\n            <div className=\"Action-Wrapper\">\n              <AnchorButton\n                name=\"Start Timing\"\n                className=\"Special\"\n                onClick={onStartTiming}\n              />\n              <AnchorButton name=\"Close Timer\" onClick={onCloseTimer} />\n            </div>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"Content-Wrapper\">\n            <AppUIStateToggle />\n            {!toggleOnSettings ? (\n              <>\n                <pre className=\"Title-Wrapper\">Time</pre>\n                <div className=\"Preview Small\">{displayTime}</div>\n              </>\n            ) : (\n              <div className=\"Stop-Watch\">\n                <Options\n                  options={[...Array(24).keys()]}\n                  onChange={onSetHours}\n                  current={hours || 0}\n                  name=\"Hours\"\n                />\n                <Options\n                  options={[...Array(60).keys()]}\n                  onChange={onSetMinutes}\n                  current={minutes || 0}\n                  name=\"Minutes\"\n                />\n                <Options\n                  options={[...Array(60).keys()]}\n                  onChange={onSetSeconds}\n                  current={seconds || 0}\n                  name=\"Seconds\"\n                />\n              </div>\n            )}\n            {!toggleOnSettings ? (\n              <>\n                <pre className=\"Title-Wrapper\">Rounds</pre>\n                <div className=\"Preview Small\">{rounds}</div>\n              </>\n            ) : (\n              <div className=\"Preview\">\n                {displayTime || \"00:00:00:00\"}\n                <Options\n                  options={[...Array(30).keys()]}\n                  onChange={setRounds}\n                  current={rounds || 0}\n                  name=\"Rounds\"\n                />\n              </div>\n            )}\n            <div className=\"Action-Wrapper\">\n              <AnchorButton\n                name=\"Start timing\"\n                className=\"Special\"\n                onClick={onStartTiming}\n              />\n              <AnchorButton name=\"Close Timer\" onClick={onCloseTimer} />\n            </div>\n          </div>\n        );\n    }\n  };\n  return <>{renderState()}</>;\n}\n\nexport default DigitalRounds;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalRounds from \"../generic/DigitalRounds\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst XY = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalRounds />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default XY;\n","import React, { useContext } from \"react\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport DigitalRounds from \"../generic/DigitalRounds\";\nimport TimerDisplay from \"../generic/TimerDisplay\";\nimport PauseDisplay from \"../generic/PauseDisplay\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport TimerGoal from \"../generic/TimerGoal\";\n\nconst Tabata = () => {\n\n  // Import context getters and setters from the Store,\n  // This will work similar to useState. However, all objects are passed down\n  // by reference, to the timer component.\n  const { status, setTimerStatus, currentTimer } = useContext(AppContext);\n\n  // Manage what the user see's at any given state.\n  // Useful way to reduce complexity associated with interfaces is to reduce actions\n  // into managable steps.\n\n  // Notice, each stage renders an independent component in itself, and passes setters down\n  // to allow for easy update of state values.\n\n  // Needed to simplify my approuch by breaking down my code into reusable componets.\n  // Default state displays [nothing to tender.]\n\n  // I simplified the render state function to reduce the amound of data that is passed back\n  // and forth between children and parent component.\n  const renderState = () => {\n    switch (status) {\n      case \"inactive\":\n        return (\n          <AnchorButton\n            name=\"Start Now\"\n            onClick={() => setTimerStatus(\"active\")}\n          />\n        );\n      case \"active\":\n        return (\n          <DigitalRounds />\n        );\n      case \"paused\":\n        return (\n          <PauseDisplay />\n        );\n      case \"timing\":\n        return (\n          <TimerDisplay />\n        );\n      case \"complete\":\n        return (\n          <TimerGoal />\n        );\n      default:\n        return <div>nothing to render</div>;\n    }\n  };\n\n  // This is the actual render. Lets just return the title, and call on the\n  // renderState method to give us an appropriate render based on the current state.\n  return (\n    <div className={\"Default-Pink-Theme\"}>\n      <div className=\"Component-Title\">{currentTimer}</div>\n      {renderState()}\n    </div>\n  );\n};\n\nexport default Tabata;\n","import Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport { AiOutlineSetting, AiOutlineFieldTime, AiOutlineRollback } from 'react-icons/ai';\n\n// Server which houses application files.\nconst server = \"https://raw.githubusercontent.com/prof-tejera/assignment-2-ROK862/\";\n\n// Application render keys for each render state.\nexport const APP_RENDER_KEYS = {\n  MENU: \"MENU\",\n  TABATA: \"TABATA\",\n  COUNTDOWN: \"COUNTDOWN\",\n  STOPWATCH: \"STOPWATCH\",\n  XY: \"XY\",\n};\n\n// Application icons keys. Quick way to manage icons used through out the\n// application.\nexport const APP_ICONS = {\n  SETTINGS: <AiOutlineSetting />,\n  START_TIMER: <AiOutlineFieldTime />,\n  BACK: <AiOutlineRollback />,\n};\n\n// Reference to application icon keys.\nexport const APP_ICON_KEYS = {\n  SETTINGS: \"SETTINGS\",\n  START_TIMER: \"START_TIMER\",\n  BACK: \"BACK\"\n};\n\n// Application audio files and other settings comes here.\nexport const APP_AUDIO = {\n  VOLUME: 0.05,\n  CLIPS: {\n    ON_START_TIMER: `${server}main/src/audio/TimerStartVolume01.mp3`,\n    ON_CLICK: `${server}main/src/audio/goalVolume02.mp3`,\n    ON_PAUSE: `${server}main/src/audio/TimerPauseVolume01.mp3`,\n    ON_TIMING: `${server}main/src/audio/TimerTimingVolume01.mp3`,\n    ON_STOP_TIMER: `${server}main/src/audio/TimerPauseVolume01.mp3`,\n    DEFAULT: `${server}main/src/audio/goalVolume01.mp3`,\n    ON_REACHED_GOAL: `${server}main/src/audio/goalVolume02.mp3`,\n    ON_COMPLETE_ROUND: `${server}main/src/audio/goalVolume03.mp3`\n  }\n}\n\n// Keys to each audio clip.\nexport const APP_AUDIO_CLIP_KEYS = {\n    ON_START_TIMER: \"ON_START_TIMER\",\n    ON_CLICK: \"ON_CLICK\",\n    ON_PAUSE: \"ON_PAUSE\",\n    ON_TIMING: \"ON_TIMING\",\n    DEFAULT: \"DEFAULT\",\n    ON_STOP_TIMER: \"ON_STOP_TIMER\",\n    ON_REACHED_GOAL: \"ON_REACHED_GOAL\",\n    ON_COMPLETE_ROUND: \"ON_COMPLETE_ROUND\"\n}\n\n// Application app flow keys comes here.\nexport const APP_FLOW_KEYS = {\n  WORKOUT: \"Workout Timer\",\n  REST: \"Rest Timer\"\n};\n\n// Application UI keys comes here.\nexport const APP_UI_KEYS = {\n  FLOW: \"FLOW\",\n  SETTINGS: \"SETTINGS\"\n};\n\n// This feature has been replaced with workflowState\n// in AppContext provider.\nlet TIMER_REF = {\n  RENDER_STATE: \"COUNTDOWN\",\n};\n\n// Application timers with associated text and render objects.\nexport const APP_TIMERS = [\n  { title: \"Time your training with a stop watch.\", subTitle: \"Let's get you started with a normal timed session. Time your workout and get feedback from the app in realtime.\", C: <Stopwatch />, S:APP_RENDER_KEYS.STOPWATCH },\n  { title: \"Set a timed goal, and track your progress.\", subTitle: \"Be proactive! Let's prepare your training session by setting timed goals.\", C: <Countdown recId={1} />, S:APP_RENDER_KEYS.COUNTDOWN },\n  { title: \"Goal driven session, with rounds.\", subTitle: \"Awesome, now let's take this a step further. Set timed goals with multiple rounds.\", C: <XY />, S:APP_RENDER_KEYS.XY },\n  { title: \"Now, we need to pace your training.\", subTitle: \"Take a training session with breaks across measurable intervals.\", C: <Tabata />, S:APP_RENDER_KEYS.TABATA },\n];\n\n// depricated module, please ignore for now.\n// Code has been moved to AppProvider and is now handled with context.\nexport const shouldRender = ({ state }) => {\n  return false;\n};\n\n// This action is no longer relevent. Replaced with workflowState in AppContext provider.\nexport const setTimerToDisplay = ({timer}) => {\n  TIMER_REF.RENDER_STATE = APP_RENDER_KEYS[timer] || APP_RENDER_KEYS.COUNTDOWN;\n}\n","import React from \"react\";\nimport { APP_ICONS } from \"../../context/settings\"; \n\nconst AnchorButton = ({className, onClick, theme, iconRef, name}) => {\n  const IconRef = APP_ICONS[iconRef];\n  return <button onClick={onClick} className={`Default-Anchor-Button ${className}`}>{IconRef || \"\"}{name}</button>;\n}\n\nexport default AnchorButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Options from \"../Inputs/Options\";\n\nconst Title = styled.div`\n  font-size: 30px;\n`;\n\n// TODO: Convert to functional component,\n// TODO: Access getters and setters using context.\nconst DisplayBreaks = ({name, onSetHours, onSetMinutes, onSetSeconds, onConvertToTime}) => {\n  return (\n    <div>\n      <Title>{name || \"Title\"}</Title>\n      <div className=\"Stop-Watch\">\n        <Options\n          options={[...Array(24).keys()]}\n          onChange={onSetHours}\n          name=\"Hours\"\n        />\n        <Options\n          options={[...Array(60).keys()]}\n          onChange={onSetMinutes}\n          name=\"Minutes\"\n        />\n        <Options\n          options={[...Array(60).keys()]}\n          onChange={onSetSeconds}\n          name=\"Seconds\"\n        />\n      </div>\n      <div className=\"Preview\">{onConvertToTime()}</div>\n    </div>\n  );\n};\n\nexport default DisplayBreaks;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport Options from \"../Inputs/Options\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport { APP_UI_KEYS } from \"../../context/settings\";\nimport AppUIStateToggle from \"./AppUIStateToggle\";\n\nconst Title = styled.div`\n  font-size: 30px;\n`;\n\n// TODO: Convert to functional component,\n// TODO: Access getters and setters using context.\nconst DisplayRounds = ({ name }) => {\n  const {\n    formattedTime: displayTime,\n    onStartTiming,\n    onStopTimer: onCloseTimer,\n    setSeconds: onSetSeconds,\n    setMinutes: onSetMinutes,\n    setHours: onSetHours,\n    setRounds: onSetRounds,\n    rounds,\n    interfaceState,\n  } = useContext(AppContext);\n  const toggleOnSettings = interfaceState === APP_UI_KEYS.FLOW;\n\n  return (\n    <div>\n      <AppUIStateToggle />\n      <Title>{name} XX</Title>\n      {toggleOnSettings ? (\n        <div className=\"Preview\">{displayTime}</div>\n      ) : (\n        <div className=\"Stop-Watch\">\n          <Options\n            options={[...Array(24).keys()]}\n            onChange={onSetHours}\n            name=\"Hours\"\n          />\n          <Options\n            options={[...Array(60).keys()]}\n            onChange={onSetMinutes}\n            name=\"Minutes\"\n          />\n          <Options\n            options={[...Array(60).keys()]}\n            onChange={onSetSeconds}\n            name=\"Seconds\"\n          />\n        </div>\n      )}\n      {toggleOnSettings ? (\n        <div className=\"Preview\">{rounds}</div>\n      ) : (\n        <div className=\"Preview Small\">\n          <Options\n            options={[...Array(11).keys()]}\n            onChange={onSetRounds}\n            name=\"Rounds\"\n          />\n        </div>\n      )}\n      <div className=\"Preview\">\n        {displayTime}\n      </div>\n      <div className=\"Action-Wrapper\">\n        <AnchorButton\n          name=\"Start timing\"\n          className=\"Special\"\n          onClick={onStartTiming}\n        />\n        <AnchorButton name=\"Close Timer\" onClick={onCloseTimer} />\n      </div>\n    </div>\n  );\n};\n//onSetHours onSetMinutes onSetSeconds onSetRounds onConvertToTime onStartTiming onStopTimer\nexport default DisplayRounds;\n","import { Component } from 'react';\nimport './Input.css';\n\nclass Input extends Component {\n  render() {\n    return (\n      <input\n        onChange={e => {\n          this.props.onChange(e.target.value);\n        }}\n        className=\"Default-input\"\n        placeholder={this.props.placeholder}\n      />\n    );\n  }\n}\n\nexport default Input;\n","import React, { useContext } from \"react\";\nimport { AppContext } from \"../../context/AppProvider\";\nimport AnchorButton from \"../buttons/AnchorButton\";\nimport { APP_RENDER_KEYS } from \"../../context/settings\";\n\nconst TimerToolBar = () => {\n    const { setCurrentTimer, status, currentTimer } = useContext(AppContext);\n    const accessToggle = (status === \"timing\") ? \"inactive\" : \"active\";\n\n    return (\n        <div className={`Timer-List ${accessToggle}`}>\n            <AnchorButton\n            className={currentTimer===APP_RENDER_KEYS.COUNTDOWN ? \"Selected\" : \"\"}\n            name={APP_RENDER_KEYS.COUNTDOWN}\n            onClick={() => setCurrentTimer(APP_RENDER_KEYS.COUNTDOWN)}\n            />\n            <AnchorButton\n            className={currentTimer===APP_RENDER_KEYS.TABATA ? \"Selected\" : \"\"}\n            name={APP_RENDER_KEYS.TABATA}\n            onClick={() => setCurrentTimer(APP_RENDER_KEYS.TABATA)}\n            />\n            <AnchorButton\n            className={currentTimer===APP_RENDER_KEYS.STOPWATCH ? \"Selected\" : \"\"}\n            name={APP_RENDER_KEYS.STOPWATCH}\n            onClick={() => setCurrentTimer(APP_RENDER_KEYS.STOPWATCH)}\n            />\n            <AnchorButton\n            className={currentTimer===APP_RENDER_KEYS.XY ? \"Selected\" : \"\"}\n            name={APP_RENDER_KEYS.XY}\n            onClick={() => setCurrentTimer(APP_RENDER_KEYS.XY)}\n            />\n        </div>\n    )\n}\n\nexport default TimerToolBar;","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport ActionButton from \"../components/buttons/ActionButton\";\nimport AnchorButton from \"../components/buttons/AnchorButton\";\nimport DisplayBreaks from \"../components/generic/DisplayBreaks\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport Input from \"../components/Inputs/Input\";\nimport Options from \"../components/Inputs/Options\";\nimport DisplayWatch from \"../components/generic/DigitalWatch\";\nimport PauseDisplay from \"../components/generic/PauseDisplay\";\nimport TimerDisplay from \"../components/generic/TimerDisplay\";\nimport TimerGoal from \"../components/generic/TimerGoal\";\nimport TimerToolBar from \"../components/generic/TimerToolBar\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 90%;\n  height: 85%;\n  overflow: scroll;\n  background: white;\n  padding: 5%;\n`;\n\nconst Note = styled.div`\npadding: 30px;\nfont-weight: 300;\nbackground: #d2ffd2;\nborder-bottom: 2px solid #0085c5;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nclass Documentation extends React.Component {\n  render() {\n    return (\n      <Container>\n        <div>\n          <br/>\n          <br/>\n          <br/>\n          <br/>\n          <Title>Documentation</Title>\n          <br/>\n          <Note><strong>NB</strong>: Due to an upgrade concerned with the way the application handles state, it no longer makes sense to pass certain props values down to some components. Thus, to prevent challenges such as <strong>Props Drilling, or State Hoisting</strong>, most components access certain \"GLOBAL STATE\" values with context directly from the <strong><a href=\"https://github.com/prof-tejera/assignment-2-ROK862/blob/main/src/context/AppProvider.js\">AppProvider</a></strong>.  For purposes of clarity, note that this is not the ultimate solution. For accurate state management--rather than directly interacting with the state store from UI code, I reckon using something like <strong><a href=\"https://react-redux.js.org/introduction/why-use-react-redux\">Redux</a></strong>. However, for purposes of this assignment, react <strong><a href=\"https://reactjs.org/docs/context.html\">useContext</a></strong> works well.</Note>\n          <DocumentComponent\n            title=\"Loading spinner \"\n            component={<Loading />}\n            propDocs={[\n              {\n                prop: \"size\",\n                description: \"Changes the size of the loading spinner\",\n                type: \"string\",\n                defaultValue: \"medium\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Action Button \"\n            component={<Input name=\"Doc Button\" placeholder=\"Doc Input\" />}\n            propDocs={[\n              {\n                prop: \"onChange\",\n                description: \"onChange event handler passed down from parent component.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"className\",\n                description: \"Class name--custom styling.\",\n                type: \"string\",\n                defaultValue: \"Default-input\",\n              },{\n                prop: \"placeholder\",\n                description: \"The placeholder value displayed when component value is empty.\",\n                type: \"string\",\n                defaultValue: \"Required.\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Anchor Button \"\n            component={<AnchorButton name=\"Doc Button\" />}\n            propDocs={[\n              {\n                prop: \"className\",\n                description: \"Change button theme.\",\n                type: \"string\",\n                defaultValue: \"Default-Action-Button\",\n              },{\n                prop: \"name\",\n                description: \"Change the title text displayed on the button.\",\n                type: \"string\",\n                defaultValue: \"Untitled\",\n              },{\n                prop: \"onClick\",\n                description: \"Button onclick event.\",\n                type: \"function\",\n                defaultValue: \"console.log()\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Action Button \"\n            component={<ActionButton name=\"Doc Button\" />}\n            propDocs={[\n              {\n                prop: \"className\",\n                description: \"Change button theme.\",\n                type: \"string\",\n                defaultValue: \"Default-Action-Button\",\n              },{\n                prop: \"name\",\n                description: \"Change the title text displayed on the button.\",\n                type: \"string\",\n                defaultValue: \"Untitled\",\n              },{\n                prop: \"onClick\",\n                description: \"Button onclick event.\",\n                type: \"function\",\n                defaultValue: \"console.log()\",\n              },\n            ]}\n          />\n          <DocumentComponent\n            title=\"Action Button \"\n            component={<Options options={[...Array(24).keys()]} onChange={(e=0)=>null} name='Doc Options' />}\n            propDocs={[\n              {\n                prop: \"name\",\n                description: \"The label to be displayed next to the select drop down.\",\n                type: \"string\",\n                defaultValue: \"Untitled\",\n              },\n              {\n                prop: \"options\",\n                description: \"An array object used to generate selectable options.\",\n                type: \"array\",\n                defaultValue: \"['Choose an Option']\",\n              },\n              {\n                prop: \"onChange\",\n                description: \"onChange event handler passed down from parent component.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Display Break\"\n            component={<DisplayBreaks onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"name\",\n                description: \"Timer title.\",\n                type: \"string\",\n                defaultValue: \"Title\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onConvertToTime\",\n                description: \"onConvertToTime gets the display time string from the parent component.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n         \n         <DocumentComponent \n            title=\"Display Rounds\"\n            component={<DisplayRounds onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"name\",\n                description: \"Timer title.\",\n                type: \"string\",\n                defaultValue: \"Title\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onConvertToTime\",\n                description: \"onConvertToTime gets the display time string from the parent component.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Display Watch\"\n            component={<DisplayWatch currentValues={{ hours:0, minutes:0, seconds:0 }} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetRounds\",\n                description: \"onSetRounds updates parent state once the rounds input changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStartTiming\",\n                description: \"onStartTiming updates parent state once the start timing button has been clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStopTimer\",\n                description: \"onStopTimer updates parent state once the Stop Timer button is clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Timer Display\"\n            component={<TimerDisplay currentValues={{ hours:0, minutes:0, seconds:0 }} onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetRounds\",\n                description: \"onSetRounds updates parent state once the rounds input changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStartTiming\",\n                description: \"onStartTiming updates parent state once the start timing button has been clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStopTimer\",\n                description: \"onStopTimer updates parent state once the Stop Timer button is clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n          <DocumentComponent \n            title=\"Pause Display\"\n            component={<PauseDisplay />}\n            propDocs={[\n              {\n                prop: \"displayTime\",\n                description: \"PauseDisplay relies on displayTime which is destructured from AppProvider as a contextValue. This field renders time on the screen.\",\n                type: \"string\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onResumeTimer\",\n                description: \"PauseDisplay relies on onResumeTimer which is destructured from AppProvider as a contextValue. onResumeTimer changes state of timer to timing, which intern starts the timer.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onCloseTimer\",\n                description: \"PauseDisplay relies on onCloseTimer which is destructured from AppProvider as a contextValue. This function closes the timer completely, and resets it.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              }\n            ]}\n          />\n\n          <DocumentComponent \n            title=\"Timer Goal\"\n            component={<TimerGoal currentValues={{ hours:0, minutes:0, seconds:0 }} onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"setTimerStatus\",\n                description: \"Timer Goal relies on setTimerStatus from AppProvider. Timer Goal uses this function to set timer active once user has reached its goal. Called with Reset Button.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n\n          <DocumentComponent \n            title=\"Pause Display\"\n            component={<PauseDisplay currentValues={{ hours:0, minutes:0, seconds:0 }} onSetHours={(e=1)=>null} onSetMinutes={(e=1)=>null} onSetSeconds={(e=1)=>null} onSetRounds={(e=1)=>null} onConvertToTime={(e=1)=>\"00:00:00\"} onStartTiming={(e=1)=>null} onStopTimer={(e=1)=>null} />}\n            propDocs={[\n              {\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetMinutes\",\n                description: \"onSetMinutes updates parent state once the minutes drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetRounds\",\n                description: \"onSetRounds updates parent state once the rounds input changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStartTiming\",\n                description: \"onStartTiming updates parent state once the start timing button has been clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetHours\",\n                description: \"onSetHours updates parent state once the hours drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"onStopTimer\",\n                description: \"onStopTimer updates parent state once the Stop Timer button is clicked.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n\n          <DocumentComponent \n            title=\"Timer Tool Bar\"\n            component={<TimerToolBar />}\n            propDocs={[\n              {\n                prop: \"setCurrentTimer\",\n                description: \"setCurrentTimer updates current timer once user selects a timer to render.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"status\",\n                description: \"status is required to determin when to disable mouse events. Note, mouse events are disabled once the timer is in a timing state--although swaping timers during this state works, it makes no sence to do so form a functional perspective.\",\n                type: \"string\", \n                defaultValue: \"Required\",\n              },{\n                prop: \"onSetSeconds\",\n                description: \"onSetSeconds updates parent state once the seconds drop down changed.\",\n                type: \"function\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"currentTimer\",\n                description: \"currentTimer is used to test if the timer button should render with selected class appended.\",\n                type: \"string\",\n                defaultValue: \"Required\",\n              },{\n                prop: \"APP_RENDER_KEYS\",\n                description: \"APP_RENDER_KEYS is an associative array which is access from a AppProvider with context as a lookup reference to determin which timer is selected, and the associated key value pair to use once updating new timer values once timer is selected.\",\n                type: \"array\",\n                defaultValue: \"Required\",\n              },\n            ]}\n          />\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default Documentation;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { _getKey } from \"../utils/helpers\";\nimport { APP_TIMERS } from \"../context/settings\";\nimport { AppContext } from \"../context/AppProvider\";\nimport TimerToolBar from \"../components/generic/TimerToolBar\";\n\nconst Timers = styled.div`\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  display: inline-block;\n`;\n\nconst Timer = styled.div`\n  font-size: 2rem;\n  padding: 0% 2% 2% 2%;\n  background: white;\n  margin: 120px auto 5% auto;\n  width: 35%;\n  min-height: 250px;\n  min-width:390px;\n  border-radius: 5px;\n  display: block;\n  box-shadow: 10px 30px 40px 5px #0000001a;\n  color: #000000;\n  text-align: center;\n  font-weight: bold;\n  border: 2px solid #f5f5f5;\n  border-bottom: 2px solid #1780ca;\n`;\n\nconst TimerTitle = styled.div`\n  font-size: 1.5rem;\n`;\nconst TimerSubtitle = styled.div`\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  font-size: 15px;\n  padding: 50px;\n  font-weight: 400;\n  padding-top: 15px;\n`;\n\nfunction App() {\n  const timers = APP_TIMERS;\n  const { shouldRender } = useContext(AppContext);\n\n  // Mmm. Seem's as though react doesnt like it when i map through an array and generate components without a {key}.\n  // React needs a point of reference to track changes when it does updates.\n  // Hence, i added keys to mapped comps wich basically gives them a unique index.\n  // Code cab be found in helper.js\n\n  return (\n    <div className={`Workflow-Wrapper`}>\n      <Timers>\n          {timers.map((timer, i) =>\n            shouldRender({ state: timer.S }) ? (\n              <Timer key={_getKey()}>\n                <TimerToolBar />\n                <TimerTitle key={_getKey()}>{timer.title}</TimerTitle>\n                <TimerSubtitle key={_getKey()}>{timer.subTitle}</TimerSubtitle>\n                {timer.C}\n              </Timer>\n            ) : (\n              <div key={_getKey()}></div>\n            )\n          )}\n      </Timers>\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AppProvider from \"./context/AppProvider\"; \nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst Container = styled.div`\n  height: 100vh;\n  display: block;\n  overflow: hidden;\n`;\n\nfunction App() {\n      // Add context Store to the entire application.\n      // Not sure if this is the right way, but should work for my setting.\n      // Looking forward to inputs, perhaps some good old constructive criticism :)\n  return (\n    <AppProvider>\n      <Container>\n        <Router>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/assignment-2-ROK862/\">Timers</Link>\n              </li>\n              <li>\n                <Link to=\"/assignment-2-ROK862/docs\">Documentation</Link>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n            <Route exact path=\"/assignment-2-ROK862/\">\n              <TimersView />\n            </Route>\n            <Route exact path=\"/assignment-2-ROK862/docs\">\n              <DocumentationView />\n            </Route>\n          </Switch>\n        </Router>\n      </Container>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}